/*
 * ufolib - Full unicode font range for Superwaba
 * Copyright (C) 2002 Oliver Erdmann
 * http://jdict.sf.net 
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License Version 2.1 as published by the Free Software Foundation
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Bdfuff.getInstance().getBdfFont() = BUParser.m_bdffont
 */

// CUP specification for a simple expression evaluator (no actions)
import java_cup.runtime.*;

parser code {: public static BdfFont m_bdffont; public static void setBdfFont( BdfFont f ) { BUParser.m_bdffont = f; } :};

/* Terminals (tokens returned by the scanner). */
terminal startfont, font, size, fontboundingbox, endfont;
terminal startproperties, endproperties;
terminal chars, startchar, encoding, swidth, dwidth, bbx, bitmap, endchar; 
terminal Integer t_integer;
terminal String t_string, t_iden;
terminal Float t_number;

/* Non terminals */
non terminal            bdffile;
non terminal		starter, header, properties, charmaps, ender;
non terminal		e_startfont, e_font, e_size, e_fontboundingbox, e_endfont;
non terminal		e_startproperties, e_endproperties, propertyentrys, propertyentry;
non terminal		e_chars, charlist, charmap, e_startchar, e_encoding, e_swidth, e_dwidth, e_bbx, bitmapsection, e_bitmap, hexlines, hexline, e_endchar; 

/* The grammar */
start with bdffile;

bdffile ::= 
  starter header properties charmaps ender |
  starter header charmaps ender;

starter ::= e_startfont;
ender ::= e_endfont;

header ::= e_font e_size e_fontboundingbox;

properties ::= e_startproperties propertyentrys e_endproperties;
propertyentrys ::= propertyentrys propertyentry | propertyentry;
propertyentry ::= t_iden:p1 t_string:p2
  {:
    BUParser.m_bdffont.oneProperty( p1, p2 );
  :};

charmaps ::= e_chars charlist;
charlist ::= charlist charmap | charmap;
charmap ::= e_startchar e_encoding e_swidth e_dwidth e_bbx bitmapsection e_endchar;
bitmapsection ::= e_bitmap hexlines | e_bitmap;
hexlines ::= hexlines hexline | hexline;
hexline ::= t_iden:s
  {:
    BUParser.m_bdffont.currGlyph().insertHexline( s );
  :};


e_startfont ::= startfont t_number:t 
  {: 
    BUParser.m_bdffont.m_startfont = t.toString(); 
  :};
e_font ::= font t_string:t 
  {: 
    BUParser.m_bdffont.m_font = t; 
  :};
e_size ::= size t_integer:t t_integer t_integer 
  {: 
    BUParser.m_bdffont.m_sizePointsize = t.intValue(); 
  :};
e_fontboundingbox ::= fontboundingbox t_integer:x1 t_integer:x2 t_integer:x3 t_integer:x4
  {:
    BUParser.m_bdffont.m_fontboundingboxFbbx = x1.intValue(); 
    BUParser.m_bdffont.m_fontboundingboxFbby = x2.intValue();
    BUParser.m_bdffont.m_fontboundingboxXoff = x3.intValue();
    BUParser.m_bdffont.m_fontboundingboxYoff = x4.intValue();
  :};
e_endfont ::= endfont;

e_startproperties ::= startproperties t_integer:t
  {:
    BUParser.m_bdffont.initProperties( t.intValue() );
  :};
e_endproperties ::= endproperties;

e_chars ::= chars t_integer:t 
  {: 
    BUParser.m_bdffont.initChars( t.intValue() ); 
  :};
e_startchar ::= startchar t_iden:s
  {:
    BUParser.m_bdffont.startChar();
    BUParser.m_bdffont.currGlyph().m_startchar = s;
  :};

e_startchar ::= startchar t_integer:s
  {:
    BUParser.m_bdffont.startChar();
    BUParser.m_bdffont.currGlyph().m_startchar = "" + s;
  :};

e_startchar ::= startchar t_number:s
  {:
    BUParser.m_bdffont.startChar();
    BUParser.m_bdffont.currGlyph().m_startchar = "" + s;
  :};

e_encoding ::= encoding t_integer:t 
  {:
    BUParser.m_bdffont.currGlyph().m_encoding = t.intValue();
    BUParser.m_bdffont.currGlyph().m_encodingRaw = t.intValue();
    BUParser.m_bdffont.mess( 3, "   Encoding: int=" + t.intValue() );
  :};
e_swidth ::= swidth t_integer:x t_integer:y
  {:
    BUParser.m_bdffont.currGlyph().m_swidthX = x.intValue();
    BUParser.m_bdffont.currGlyph().m_swidthY = y.intValue();
  :};
e_dwidth ::= dwidth t_integer:x t_integer:y
  {:
    BUParser.m_bdffont.currGlyph().m_dwidthX = x.intValue();
    BUParser.m_bdffont.currGlyph().m_dwidthY = y.intValue();
  :};
e_bbx ::= bbx t_integer:x t_integer:y t_integer:xo t_integer:yo
  {:
    BUParser.m_bdffont.currGlyph().m_bbW = x.intValue();
    BUParser.m_bdffont.currGlyph().m_bbH = y.intValue();
    BUParser.m_bdffont.currGlyph().m_bbXoff = xo.intValue();
    BUParser.m_bdffont.currGlyph().m_bbYoff = yo.intValue();
    BUParser.m_bdffont.currGlyph().initBitmap();
  :};
e_bitmap ::= bitmap;
e_endchar ::= endchar;

