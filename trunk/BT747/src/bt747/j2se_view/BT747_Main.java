/*
 * BT747_Main.java
 *
 * Created on 23 mars 2008, 10:37
 */
package bt747.j2se_view;

import bt747.control.Controller;
import bt747.model.Model;
import bt747.model.ModelEvent;
import bt747.sys.Convert;
import bt747.ui.Event;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.UIManager;

/**
 *
 * @author  Mario De Weerd
 */
public class BT747_Main extends javax.swing.JFrame
        implements bt747.model.ModelListener {

    /**
     * 
     */
    private static final long serialVersionUID = 1L;
    Model m;
    Controller c;

    /** Creates new form BT747_Main */
    public BT747_Main() {
        initComponents();
    }

    public BT747_Main(Model m, Controller c) {
        this.m = m;
        this.c = c;
        initComponents();
        initAppData();
        m.addListener(this);
    }

    public void newEvent(bt747.ui.Event e) {
        onEvent(e);
    }

    private void initAppData() {
        progressBarUpdate();
        getWorkDirPath();
        getRawLogFilePath();
        getOutputFilePath();
        getIncremental();
    }

    public void onEvent(bt747.ui.Event e) {
        int type = e.getType();
        if (type == ModelEvent.DOWNLOAD_PROGRESS_UPDATE) {
            progressBarUpdate();
        } else if (type == ModelEvent.LOGFILEPATH_UPDATE) {
            getRawLogFilePath();
        } else if (type == ModelEvent.OUTPUTFILEPATH_UPDATE) {
            getOutputFilePath();
        } else if (type == ModelEvent.WORKDIRPATH_UPDATE) {
            getWorkDirPath();
        } else if (type == ModelEvent.INCREMENTAL_CHANGE) {
            getIncremental();
        }
    }

    public void gpsEvent(Event e) {
        // TODO Auto-generated method stub
        
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        WorkingDirectoryChooser = new javax.swing.JFileChooser();
        RawLogFileChooser = new javax.swing.JFileChooser();
        OutputFileChooser = new javax.swing.JFileChooser();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        LogOperationsPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        tfWorkDirectory = new javax.swing.JTextField();
        tfRawLogFilePath = new javax.swing.JTextField();
        tfOutputFileBaseName = new javax.swing.JTextField();
        btWorkingDirectory = new javax.swing.JButton();
        btRawLogFile = new javax.swing.JButton();
        btOutputFile = new javax.swing.JButton();
        btConvert = new javax.swing.JButton();
        cbFormat = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        cbIncremental = new javax.swing.JCheckBox();
        DownloadProgressLabel = new javax.swing.JLabel();
        DownloadProgressBar = new javax.swing.JProgressBar();
        jPanel3 = new javax.swing.JPanel();
        btConnect = new javax.swing.JButton();
        cbPortName = new javax.swing.JComboBox();
        DeviceSettingsPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        SettingsMenu = new javax.swing.JMenu();
        InfoMenu = new javax.swing.JMenu();
        AboutBT747 = new javax.swing.JMenuItem();

        WorkingDirectoryChooser.setDialogTitle("Choose Working Directory");
        WorkingDirectoryChooser.setDialogType(javax.swing.JFileChooser.CUSTOM_DIALOG);
        WorkingDirectoryChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BT747 Application");

        tfWorkDirectory.setText("jTextField1");
        tfWorkDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfWorkDirectoryActionPerformed(evt);
            }
        });
        tfWorkDirectory.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfWorkDirectoryFocusLost(evt);
            }
        });

        tfRawLogFilePath.setText("jTextField2");

        tfOutputFileBaseName.setText("jTextField3");

        btWorkingDirectory.setText("Working Directory :");
        btWorkingDirectory.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btWorkingDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btWorkingDirectoryActionPerformed(evt);
                btWorkingDirectoryActionPerformed1(evt);
            }
        });

        btRawLogFile.setText("Raw Log File :");
        btRawLogFile.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btRawLogFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRawLogFileActionPerformed(evt);
            }
        });

        btOutputFile.setText("Output File :");
        btOutputFile.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btOutputFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btOutputFileActionPerformed(evt);
            }
        });

        btConvert.setText("Convert To");
        btConvert.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btConvertMouseReleased(evt);
            }
        });
        btConvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConvertActionPerformed(evt);
            }
        });

        cbFormat.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "GPX", "CSV", "CompeGPS (.TRK,.WPT)", "KML", "OziExplorer (.PLT)", "NMEA", "Google Map (.html)" }));
        cbFormat.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbFormatItemStateChanged(evt);
            }
        });
        cbFormat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFormatActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(btOutputFile, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(btRawLogFile, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(btWorkingDirectory, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(tfRawLogFilePath, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                    .add(tfWorkDirectory, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(tfOutputFileBaseName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btConvert)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cbFormat, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tfWorkDirectory, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btWorkingDirectory))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(tfRawLogFilePath, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btRawLogFile))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btOutputFile)
                    .add(tfOutputFileBaseName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btConvert)
                    .add(cbFormat, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tfWorkDirectory.setText(m.getBaseDirPath());
        setSelectedFormat(cbFormat.getSelectedItem().toString());

        jButton1.setText("Download Log");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        cbIncremental.setText("Incremental Download");
        cbIncremental.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbIncrementalActionPerformed(evt);
            }
        });

        DownloadProgressLabel.setText("Download progress");

        DownloadProgressBar.setBackground(javax.swing.UIManager.getDefaults().getColor("nbProgressBar.Foreground"));
        DownloadProgressBar.setForeground(new java.awt.Color(204, 255, 204));
        DownloadProgressBar.setFocusable(false);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jButton1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 33, Short.MAX_VALUE)
                        .add(cbIncremental))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(DownloadProgressLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(DownloadProgressBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton1)
                    .add(cbIncremental))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 39, Short.MAX_VALUE)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(DownloadProgressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(DownloadProgressLabel))
                .addContainerGap())
        );

        DownloadProgressBar.getAccessibleContext().setAccessibleName("DownloadProgessBar");
        progressBarUpdate();

        btConnect.setText("Connect");
        btConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConnectActionPerformed(evt);
            }
        });

        cbPortName.setEditable(true);
        cbPortName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "USB (for Linux, Mac)", "BLUETOOTH (for Mac)", "COM1:", "COM2:", "COM3:", "COM4:", "COM5:", "COM6:", "COM7:", "COM8:", "COM9:", "COM10:", "COM11:", "COM12:", "COM13:", "COM14:", "COM15:", "COM16:" }));
        cbPortName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPortNameActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(btConnect)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cbPortName, 0, 152, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btConnect)
                    .add(cbPortName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(66, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout LogOperationsPanelLayout = new org.jdesktop.layout.GroupLayout(LogOperationsPanel);
        LogOperationsPanel.setLayout(LogOperationsPanelLayout);
        LogOperationsPanelLayout.setHorizontalGroup(
            LogOperationsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(LogOperationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(LogOperationsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(LogOperationsPanelLayout.createSequentialGroup()
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        LogOperationsPanelLayout.setVerticalGroup(
            LogOperationsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(LogOperationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(LogOperationsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Log operations", LogOperationsPanel);

        org.jdesktop.layout.GroupLayout DeviceSettingsPanelLayout = new org.jdesktop.layout.GroupLayout(DeviceSettingsPanel);
        DeviceSettingsPanel.setLayout(DeviceSettingsPanelLayout);
        DeviceSettingsPanelLayout.setHorizontalGroup(
            DeviceSettingsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 560, Short.MAX_VALUE)
        );
        DeviceSettingsPanelLayout.setVerticalGroup(
            DeviceSettingsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 231, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Device settings", DeviceSettingsPanel);

        FileMenu.setText("File");
        jMenuBar1.add(FileMenu);

        SettingsMenu.setText("Settings");
        jMenuBar1.add(SettingsMenu);

        InfoMenu.setText("Info");

        AboutBT747.setText(null);
        InfoMenu.add(AboutBT747);

        jMenuBar1.add(InfoMenu);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Log download & Convert");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private int selectedFormat = Model.C_NO_LOG;

    private void cbFormatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFormatActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_cbFormatActionPerformed

    private void btConvertMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btConvertMouseReleased

}//GEN-LAST:event_btConvertMouseReleased

    private final void setSelectedFormat(final String selected) {
        if (selected.startsWith("CSV")) {
            selectedFormat = Model.C_CSV_LOG;
        } else if (selected.startsWith("Google Map")) {
            selectedFormat = Model.C_GMAP_LOG;
        } else if (selected.startsWith("GPX")) {
            selectedFormat = Model.C_GPX_LOG;
        } else if (selected.startsWith("KML")) {
            selectedFormat = Model.C_KML_LOG;
        } else if (selected.startsWith("NMEA")) {
            selectedFormat = Model.C_NMEA_LOG;
        } else if (selected.startsWith("Ozi")) {
            selectedFormat = Model.C_PLT_LOG;
        } else if (selected.startsWith("Compe")) {
            selectedFormat = Model.C_TRK_LOG;
        } else {
            selectedFormat = Model.C_NO_LOG;
        }
    }

    private void cbFormatItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbFormatItemStateChanged
        // TODO add your handling code here:
        switch (evt.getStateChange()) {
            case java.awt.event.ItemEvent.SELECTED:
                setSelectedFormat(evt.getItem().toString());
                break;
            case java.awt.event.ItemEvent.DESELECTED:
                break;
        }
}//GEN-LAST:event_cbFormatItemStateChanged

    private void progressBarUpdate() {
        DownloadProgressBar.setMinimum(m.getStartAddr());
        DownloadProgressBar.setMaximum(m.getEndAddr());
        DownloadProgressBar.setValue(m.getNextReadAddr());
        DownloadProgressBar.setVisible(m.isDownloadOnGoing());
        DownloadProgressLabel.setVisible(m.isDownloadOnGoing());
    //this.invalidate();
    //this.paintAll(this.getGraphics());
    }

    private void tfWorkDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfWorkDirectoryActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_tfWorkDirectoryActionPerformed

    private void tfWorkDirectoryFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfWorkDirectoryFocusLost
        c.setBaseDirPath(tfWorkDirectory.getText());
}//GEN-LAST:event_tfWorkDirectoryFocusLost

    private void btWorkingDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btWorkingDirectoryActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_btWorkingDirectoryActionPerformed

    private void btRawLogFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRawLogFileActionPerformed
        getRawLogFilePath();
        if (RawLogFileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            c.setLogFilePath(
                    bt747.util.FileUtil.getRelativePath(
                    m.getBaseDirPath(),
                    RawLogFileChooser.getSelectedFile().getAbsolutePath(),
                    File.separatorChar));
        }

}//GEN-LAST:event_btRawLogFileActionPerformed

    private void btOutputFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btOutputFileActionPerformed
        getOutputFilePath();
        if (OutputFileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            c.setOutputFileBasePath(
                    bt747.util.FileUtil.getRelativePath(
                    m.getBaseDirPath(),
                    OutputFileChooser.getSelectedFile().getAbsolutePath(),
                    File.separatorChar));
        }
}//GEN-LAST:event_btOutputFileActionPerformed

    private void btConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConvertActionPerformed
        c.writeLog(selectedFormat);
}//GEN-LAST:event_btConvertActionPerformed

    private void getOutputFilePath() {
        File curDir;
        curDir = new File(m.getReportFileBasePath());
//        if (curDir.exists()) {
        OutputFileChooser.setCurrentDirectory(curDir);
//        }
        tfOutputFileBaseName.setText(m.getReportFileBase());
    }

    private void getRawLogFilePath() {
        File curDir;
        curDir = new File(m.getLogFilePath());
//        if (curDir.exists()) {
        RawLogFileChooser.setCurrentDirectory(curDir);
//        }
        tfRawLogFilePath.setText(m.getLogFile());
    }

    private void getWorkDirPath() {
        File curDir;
        curDir = new File(m.getBaseDirPath());
        if (curDir.exists()) {
            WorkingDirectoryChooser.setCurrentDirectory(curDir);
        }
        tfWorkDirectory.setText(curDir.getPath());
    }
    
    private void getIncremental() {
        cbIncremental.setSelected(m.isIncremental());
    }

    private void btWorkingDirectoryActionPerformed1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btWorkingDirectoryActionPerformed1
        getWorkDirPath();
        if (WorkingDirectoryChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            c.setBaseDirPath(WorkingDirectoryChooser.getSelectedFile().getAbsolutePath());
        }
}//GEN-LAST:event_btWorkingDirectoryActionPerformed1

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        c.startDownload();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cbIncrementalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbIncrementalActionPerformed
        c.setIncremental(cbIncremental.isSelected());
}//GEN-LAST:event_cbIncrementalActionPerformed

    private void btConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConnectActionPerformed
        openPort(cbPortName.getSelectedItem().toString());
}//GEN-LAST:event_btConnectActionPerformed

    private void openPort(String s) {
        boolean foundPort=false;
        int port=0;
        try {
            port=Convert.toInt(s);
            if(Convert.toString(port).equals(s)) {
                foundPort=true;
            }
        } catch (Exception e) {
            // Ignore exception
        }
        try {
        if(!foundPort
                && s.toUpperCase().startsWith("COM")) {
            if(s.length()==5&&s.charAt(4)==':') {
                port=Convert.toInt(s.substring(3,4));
            } else if(s.length()==6&&s.charAt(5)==':') {
                port=Convert.toInt(s.substring(3,5));
            } else {
                port=Convert.toInt(s.substring(3));
            }
            if(s.toUpperCase().equals("COM"+port)
                    ||s.toUpperCase().equals("COM"+port+":")) {
            } {
                foundPort=true;
            }
        }
        } catch (Exception e) {
            // Ignore exception
        }
        if(foundPort) {
            c.setPort(port);
        } else {
            if (s.toUpperCase().equals("BLUETOOTH")) {
                c.setBluetooth();
            } else if (s.toUpperCase().startsWith("USB")) {
                c.setUsb();
            } else {
                c.setFreeTextPort(s);
            }
        }
    }
    

    private void cbPortNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPortNameActionPerformed
        //selectPort(jComboBox1.getSelectedItem().toString());
}//GEN-LAST:event_cbPortNameActionPerformed
    /*
     * Find the appropriate look and feel for the system
     * *********************************************************************/
    private static final String[] lookAndFeels = {
        "com.sun.java.swing.plaf.windows.WindowsLookAndFeel",
        "com.sun.java.swing.plaf.windows.WindowsClassicLookAndFeel",
        "com.sun.java.swing.plaf.gtk.GTKLookAndFeel",
        "com.sun.java.swing.plaf.motif.MotifLookAndFeel",
        "javax.swing.plaf.metal.MetalLookAndFeel",
        "javax.swing.plaf.mac.MacLookAndFeel"
    };
    /* Index for Mac look and feel */
    private static final int C_MAC_LOOKANDFEEL_IDX = lookAndFeels.length - 1;

    /**
     * Try setting a look and feel for the system - catch the Exception
     * when not found.
     * @return true if successfull
     */
    private final static boolean tryLookAndFeel(String s) {
        try {
            UIManager.setLookAndFeel(s);
            return true;
        } catch (Exception e) {
        }
        return false;
    }

    /**
     * Set a good look and feel for the system.
     */
    public static void myLookAndFeel() {
        boolean lookAndFeelIsSet = false;
        if (java.lang.System.getProperty("os.name").toLowerCase().startsWith("mac")) {
            lookAndFeelIsSet = tryLookAndFeel(lookAndFeels[C_MAC_LOOKANDFEEL_IDX]);
        }
        for (int i = 0; !lookAndFeelIsSet && (i < lookAndFeels.length); i++) {
            lookAndFeelIsSet = tryLookAndFeel(lookAndFeels[i]);
        }
        if (!lookAndFeelIsSet) {
            tryLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        myLookAndFeel();
        java.awt.EventQueue.invokeLater(new Runnable() {

            Model m = new Model();
            Controller c = new Controller(m);

            public void run() {
                BT747_Main app = new BT747_Main(m, c);
                app.setVisible(true);
            }
        });
    }
    
//    public static void main(String args) {
//        main((String[])null);
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutBT747;
    private javax.swing.JPanel DeviceSettingsPanel;
    private javax.swing.JProgressBar DownloadProgressBar;
    private javax.swing.JLabel DownloadProgressLabel;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenu InfoMenu;
    private javax.swing.JPanel LogOperationsPanel;
    private javax.swing.JFileChooser OutputFileChooser;
    private javax.swing.JFileChooser RawLogFileChooser;
    private javax.swing.JMenu SettingsMenu;
    private javax.swing.JFileChooser WorkingDirectoryChooser;
    private javax.swing.JButton btConnect;
    private javax.swing.JButton btConvert;
    private javax.swing.JButton btOutputFile;
    private javax.swing.JButton btRawLogFile;
    private javax.swing.JButton btWorkingDirectory;
    private javax.swing.JComboBox cbFormat;
    private javax.swing.JCheckBox cbIncremental;
    private javax.swing.JComboBox cbPortName;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField tfOutputFileBaseName;
    private javax.swing.JTextField tfRawLogFilePath;
    private javax.swing.JTextField tfWorkDirectory;
    // End of variables declaration//GEN-END:variables


}
