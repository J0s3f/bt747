// ********************************************************************
// *** BT 747 ***
// *** April 14, 2007 ***
// *** (c)2007 Mario De Weerd ***
// *** m.deweerd@ieee.org ***
// *** ********************************************************** ***
// *** Software is provided "AS IS," without a warranty of any ***
// *** kind. ALL EXPRESS OR IMPLIED REPRESENTATIONS AND WARRANTIES,***
// *** INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS ***
// *** FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT, ARE HEREBY ***
// *** EXCLUDED. THE ENTIRE RISK ARISING OUT OF USING THE SOFTWARE ***
// *** IS ASSUMED BY THE USER. ***
// *** See the GNU General Public License Version 3 for details. ***
// *** *********************************************************** ***
package bt747.j2se_view;

import gps.BT747Constants;

import javax.swing.JPanel;

import bt747.model.AppSettings;
import bt747.model.Model;
import bt747.model.ModelEvent;
import bt747.model.ModelListener;
import bt747.sys.JavaLibBridge;

/**
 * 
 * @author Mario De Weerd
 */
public final class AgpsPanel extends javax.swing.JPanel
        implements ModelListener {

    /**
     * 
     */
    private static final long serialVersionUID = 9139717181351131626L;

    private J2SEAppController c;
    private Model m;

    /** Creates new form AdvancedDeviceSettingsPanel */
    public AgpsPanel() {
        initComponents();

    }

    public void init(final J2SEAppController pC) {
        c = pC;
        m = c.getModel();
        m.addListener(this);

        updateConnected();
        updateAppURL();
    }

    private final void updateAppURL() {
        txtAgpsUrl.setText(m.getStringOpt(AppSettings.AGPSURL));
    }
    
    public void modelEvent(final ModelEvent e) {
        // TODO Auto-generated method stub
        final int type = e.getType();
        switch (type) {
        case ModelEvent.CONNECTED:
        case ModelEvent.DISCONNECTED:
            updateConnected();
            break;
        case ModelEvent.SETTING_CHANGE:
            switch (Integer.parseInt((String)e.getArg())) {
            case AppSettings.AGPSURL:
                txtAgpsUrl.setText(m.getStringOpt(AppSettings.AGPSURL));
                break;
            default:
                break;
            }
        }
    }

    private final void updateConnected() {
        final JPanel[] panels = { agpsPanel };

        for (final JPanel panel : panels) {
            J2SEAppController.disablePanel(panel, m.isConnected());
        }
    }


    /**
     * This method is called from within the constructor to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        agpsPanel = new javax.swing.JPanel();
        txtAgpsUrl = new javax.swing.JTextField();
        lbAgpsUrl = new javax.swing.JLabel();
        btUploadAgpsData = new javax.swing.JButton();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("bt747/j2se_view/Bundle"); // NOI18N
        agpsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("AgpsPanel.agpsPanel.border.title"))); // NOI18N

        txtAgpsUrl.setText(bundle.getString("AgpsPanel.txtAgpsUrl.text")); // NOI18N
        txtAgpsUrl.setToolTipText(bundle.getString("AgpsPanel.txtAgpsUrl.toolTipText")); // NOI18N
        txtAgpsUrl.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAgpsUrlFocusLost(evt);
            }
        });

        lbAgpsUrl.setText(bundle.getString("AgpsPanel.lbAgpsUrl.text")); // NOI18N

        btUploadAgpsData.setText(bundle.getString("AgpsPanel.btUploadAgpsData.text")); // NOI18N
        btUploadAgpsData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUploadAgpsDataActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout agpsPanelLayout = new org.jdesktop.layout.GroupLayout(agpsPanel);
        agpsPanel.setLayout(agpsPanelLayout);
        agpsPanelLayout.setHorizontalGroup(
            agpsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(agpsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(agpsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(agpsPanelLayout.createSequentialGroup()
                        .add(lbAgpsUrl)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(txtAgpsUrl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 351, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(btUploadAgpsData))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        agpsPanelLayout.setVerticalGroup(
            agpsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(agpsPanelLayout.createSequentialGroup()
                .add(agpsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lbAgpsUrl)
                    .add(txtAgpsUrl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btUploadAgpsData))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(agpsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(agpsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }//GEN-END:initComponents

    private void txtAgpsUrlFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAgpsUrlFocusLost
        c.setStringOpt(AppSettings.AGPSURL,txtAgpsUrl.getText());
    }//GEN-LAST:event_txtAgpsUrlFocusLost

    private void btUploadAgpsDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUploadAgpsDataActionPerformed
        c.downloadAndUploadAgpsData();
    }//GEN-LAST:event_btUploadAgpsDataActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel agpsPanel;
    private javax.swing.JButton btUploadAgpsData;
    private javax.swing.JLabel lbAgpsUrl;
    private javax.swing.JTextField txtAgpsUrl;
    // End of variables declaration//GEN-END:variables

}
