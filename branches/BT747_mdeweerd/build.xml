<?xml version="1.0"?>

<project name="BT747" basedir="." default="all">
	<!-- Local properties (not in version control/local override) -->
	<property file="local.properties" />

	<!-- Allows any user specific values to override the defaults -->
	<property file="build.properties" />

	<!-- Default properties (in version control) -->
	<property file="default.properties" />

	<property name="dist" value="dist" />

	<property name="application" value="BT747" />

	<property name="keytool.alias" value="alogin" />
	<property name="keytool.passwd" value="secret" />
	<property name="keytool.keystore" value="cfg/jws/myKeystore" />

	<property name="superwaba.jar" value="${lib.dir}/Waba_only.jar" />
	<property name="swcollections.jar"
	          value="${lib.dir}/collections-superwaba.jar"
	/>

	<property name="waba.jar" value="${lib.dir}/Waba_only.jar" />
	<property name="wabalang.jar" value="${lib.dir}/wabalang.jar" />
	<property name="rxtxcomm.jar"
	          value="${lib.dir}/rxtx-2.1-7-bins-r2/RXTXcomm.jar"
	/>
	<property name="swinglayout.jar"
	          value="${lib.dir}/swing-layout-1.0.3.jar"
	/>
    <property name="swingx.jar" value="${lib.dir}/swingx.jar" />
    <property name="swingx-ws.jar" value="${lib.dir}/swingx-ws.jar" />
	<property name="jcalendar.jar" value="${lib.dir}/jcalendar-1.3.2.jar" />
	<property name="jopt-simple.jar" value="${lib.dir}/jopt-simple-2.4.1.jar" />

	<property name="j2se.main" value="bt747.j2se_view.BT747Main" />
	<property name="j2se.main2" value="bt747.j2se_view.BT747Intl" />

	<!-- Application classpath -->
	<path id="classpath">
		<pathelement location="${superwaba.jar}" />
		<pathelement location="${swcollections.jar}" />
		<pathelement location="lib/win32comm.jar" />
	</path>

	<path id="wabalangclasspath">
		<pathelement location="${superwaba.jar}" />
	</path>

	<path id="rxtxclasspath">
		<pathelement location="${waba.jar}" />
		<pathelement location="${superwaba.jar}" />
		<pathelement location="${swcollections.jar}" />
		<pathelement location="${rxtxcomm.jar}" />
	</path>

	<!-- New classpath to use library -->
	<path id="wabaclasspath">
		<pathelement location="${waba.jar}" />
		<pathelement location="${superwaba.jar}" />
		<pathelement location="${swcollections.jar}" />
		<pathelement location="${rxtxcomm.jar}" />
		<pathelement location="${dist}/lib${ant.project.name}.jar" />
	</path>


	<path id="symbianclasspath">
		<pathelement location="${superwaba.jar}" />
		<pathelement location="${swcollections.jar}" />
	</path>


	<!-- Warp/Exegen classpath -->
	<path id="utils">
		<pathelement location="${superwaba_root}/lib/SuperWabaTools.jar" />
		<pathelement location="${superwaba_root}/lib/SuperWaba.jar" />
	</path>


	<!-- Set some properties according to availability of files -->
	<!-- Currently set in local.properties so that only the release
	     responsible uploads an packages files.
	<available file="package.bat" property="do.package" value="true"/>
	<available file="upload.bat"  property="do.upload"  value="true"/>
	  -->
	<!-- Set the default language -->
	<!-- ======================================== -->
	<!-- all - currently build english target     -->
	<!--       without uploading the package      -->
	<!-- ======================================== -->
	<target name="all" depends="clean,dist" />

	<target name="all.package" depends="all,package" />

	<!-- ======================================== -->
	<!-- clean - Clean directories and files      -->
	<!-- ======================================== -->
	<target name="clean">
		<delete dir="${build.dir}" />
		<delete dir="${rxtxbuild.dir}" />
		<delete dir="${filebuild.dir}" />
		<delete dir="${dist}" />
	</target>

	<!-- ======================================== -->
	<!-- package - create distribution zip        -->
	<!-- ======================================== -->
	<target name="package" if="do.package">
		<exec executable="package.bat" failifexecutionfails="false" />
	</target>

	<target name="upload-jnlp" if="do.upload">
		<signjar jar="dist/BT747.jar"
		         alias="${keytool.alias}"
		         storepass="${keytool.passwd}"
		         keystore="${keytool.keystore}"
		/>
		<signjar jar="dist/BT747_rxtx.jar"
		         alias="${keytool.alias}"
		         storepass="${keytool.passwd}"
		         keystore="${keytool.keystore}"
		/>
		<!--
        <scp file="BT747.jar"
            todir="shell.sourceforge.net:bt747/htdocs/"/>
            -->

		<exec executable="upload.bat" failifexecutionfails="false" />
	</target>

	<!-- ======================================== -->
	<!-- j2sewaba.* - run and build for j2se      -->
	<!--              + waba in one launch        -->
	<!-- ======================================== -->
	<!-- Execution order:                         -->
	<!-- 1. Copy sources                          -->
	<!-- 2. Compile (build)                       -->
	<!-- 3. Build the jar                         -->
	<!-- 4. To distribution and sign              -->

	<macrodef name="build.rxtx">
		<attribute name="suffix" default="_waba_j2se" />
		<attribute name="build.j2se" default="" />
		<attribute name="no.waba" default="" />
		<attribute name="build.lib" default="" />
		<sequential>
			<antcall target="proguard.rxtx">
				<param name="build.j2se" value="@{build.j2se}" />
				<param name="name.suffix" value="@{suffix}" />
				<param name="no.waba" value="@{no.waba}" />
				<param name="build.lib" value="@{build.lib}" />
			</antcall>
		</sequential>
	</macrodef>


	<target name="cond.proguard.rxtx-dist" depends="proguard.rxtx-dist" />
	<target name="proguard.rxtx-dist" unless="skip.proguard">
		<taskdef name="proguard"
		         classpath="${proguardLib}"
		         classname="proguard.ant.ProGuardTask"
		/>
		<move tofile="${rxtxbuild.dir}/tmp.jar" file="${proguard.infile}" />

		<!-- Then, build a single jar -->
		<!--
              -overloadaggressively
              -repackageclasses ''
              -allowaccessmodification
                      -keep public class bt747.ui.MessageBox { *; }
              
          -->

		<proguard shrink="${proguard.shrink}"
		          defaultpackage=""
		          optimize="{proguard.optimize}"
		          obfuscate="false"
		          allowaccessmodification="${proguard.accessmodification}"
		          flattenpackagehierarchy=""
		          printusage="false"
		          overloadaggressively="false"
		          verbose="true"
		          ignorewarnings="true"
		>
			<libraryjar file="${proguard.java.rt.lib}" />
            <libraryjar file="${rxtxcomm.jar}" />
			<libraryjar file="${superwaba.jar}" />
			<injar path="${rxtxbuild.dir}/tmp.jar" />
			<outjar path="${proguard.infile}" />
          -optimizationpasses 1
          -injar ${swcollections.jar}(!META-INF/**)
          -printmapping ${dist}/${ant.project.name}${suffix}.map
          -keep public class BT747
          -keep public class bt747.j2se_view.BT747
	      -keep public class sun.audio.AudioStream
          -keep public class * implements gps.log.in.GPSLogConvert
          -keep public class * extends waba.ui.MainWindow
 	      -keep public class * implements bt747.lang.TxtInterface
          -keep public class * extends gps.connection.GPSPort
	      -keep public class * {
			public static void setGpsPortInstance(gps.connection.GPSPort);
		  }
	      -keep public class bt747.Version { *; }
          -keepclasseswithmembers public class * {
               public static void main(java.lang.String[]); }
      </proguard>
	</target>

	<macrodef name="dist-jar">
		<attribute name="suffix" default="_rxtx" />
		<attribute name="build.j2se" default="" />
		<sequential>
			<build.rxtx suffix="@{suffix}_tmp" build.j2se="@{build.j2se}" />
			<move file="${rxtxbuild.dir}/${ant.project.name}@{suffix}_tmp.jar"
			      tofile="${dist}/${ant.project.name}@{suffix}.jar"
			/>

			<antcall target="proguard.rxtx-dist">
				<param name="proguard.infile"
				       value="${dist}/${ant.project.name}@{suffix}.jar"
				/>
				<param name="suffix" value="@{suffix}" />
			</antcall>
			<antcall target="sign">
				<param name="jar.tosign"
				       value="${dist}/${ant.project.name}@{suffix}.jar"
				/>
			</antcall>
		</sequential>
	</macrodef>


	<target name="dist.rxtx">
		<dist-jar suffix="_rxtx" build.j2se="false" />
	</target>


	<path id="j2seclasspath">
		<pathelement location="${dist}/lib${ant.project.name}.jar" />
		<pathelement location="${jcalendar.jar}" />
        <pathelement location="${swingx.jar}" />
        <pathelement location="${swingx-ws.jar}" />
		<pathelement location="${jopt-simple.jar}" />
		<pathelement location="${swinglayout.jar}" />
		<pathelement location="${rxtxcomm.jar}" />
	</path>



	<uptodate property="libj2se.uptodate"
	          targetfile="${dist}/lib${ant.project.name}.jar"
	>
		<srcfiles dir="${src.dir}/bt747/model" includes="**" />
		<srcfiles dir="${src.dir}/gps" includes="**" />
	</uptodate>


	<!-- BUILD THE DESKTOP APPLICATION
	- 1. Build/distribute the library
	- 2. Compile the J2SE specific files.
	- [No optimisation here]
	-->
	<target name="build.j2seapp">
		<!--Need this in stead of dependency because when files are erase 'up-to-date' is not correct. -->
		<ant inheritall="false" target="dist.libj2se" />
		<delete dir="${j2sebuild.dir}" />
		<mkdir dir="${j2sebuild.dir}" />

		<javac verbose="no"
		       srcdir="${src_j2se.dir}"
		       destdir="${j2sebuild.dir}"
		       optimize="${java.optimize}"
		       debug="${java.debug}"
		       classpathref="j2seclasspath"
		       encoding="iso-8859-15"
			
		>
			<include name="bt747/j2se_view/BT747Main.java" />
			<include name="bt747/j2se_view/BT747cmd.java" />
			<exclude name="bt747/waba_view/**" />
			<exclude name="net/sf/net/bt747/waba/**" />
			<compilerarg line="-Xlint:unchecked"/>
		</javac>

		<!--
            <include name="net/sf/net/bt747/j2se/map/**" />
        <copy todir="${j2sebuild.dir}">
            <fileset dir="src">
                <exclude name="**/*.java" />
            </fileset>
        </copy>
        -->
	</target>

	<!-- BUILD THE WABA APPLICATION FOR THE DESKTOP
	    [NOT DEBUGGED YET - BUILD METHOD UNDER DEVELOPMENT]
	    - 1. Build/distribute the library
	    - 2. Compile the J2SE specific files.
	    - [No optimisation here]
	    -->
	<target name="build.wabaapp">
		<!--Need this in stead of dependency because when files are erase 'up-to-date' is not correct. -->
		<ant inheritall="false" target="dist.libj2se" />
		<delete dir="${wababuild.dir}" />
		<mkdir dir="${wababuild.dir}" />

		<javac verbose="no"
		       srcdir="${src_waba.dir}"
		       destdir="${wababuild.dir}"
		       optimize="${java.optimize}"
		       debug="${java.debug}"
		       classpathref="wabaclasspath"
		       encoding="iso-8859-15"
		>
			<include name="BT747.java" />
			<compilerarg line="-Xlint:unchecked" />
		</javac>

	</target>

    <target name="dist.j2se" depends="build.j2seapp">
        <buildnumber file="build.num" />
        <delete file="MANIFEST.MF" />
        <manifest file="MANIFEST.MF">
            <attribute name="Built-By" value="${user.name}" />
            <attribute name="Main-Class" value="${j2se.main}" />
            <attribute name="Implementation-Version"
                       value="${full.build.version}"
            />
            <attribute name="Class-Path"
                       value="libBT747.jar dist/libBT747.jar lib/libBT747.jar RXTXcomm.jar collections-superwaba.jar swing-layout-1.0.3.jar ../lib/RXTXcomm.jar ../${swinglayout.jar} ../lib/swingx-ws.jar ../lib/swingx.jar ../lib/jcalendar-1.3.2.jar lib/RXTXcomm.jar lib/swingx.jar lib/swingx-ws.jar lib/swing-layout-1.0.3.jar lib/jcalendar-1.3.2.jar"
            />
        </manifest>
        <!-- It might be possible to read the version in the application:
                 TheMainClass.class.getPackage().getImplementationVersion() ); -->

        <!-- 
        <jar manifest="MANIFEST.MF" jarfile="${j2sebuild.dir}/${ant.project.name}_j2se.jar" compress="true">
            <fileset dir="${j2sebuild.dir}" includes="**/*.class" />
        </jar>
        -->

        <jar manifest="MANIFEST.MF"
             jarfile="${j2sebuild.dir}/${ant.project.name}_j2se.jar"
             compress="true"
        >
            <fileset dir="${icon.dir}/.." includes="icons/bt747_16x16.gif" />
            <fileset dir="${icon.dir}/.." includes="icons/bt747_24x24.gif" />
            <fileset dir="${icon.dir}/.." includes="icons/bt747_32x32.gif" />
            <fileset dir="${icon.dir}/.." includes="icons/bt747_128x128.gif" />
            <fileset dir="${src_j2se.dir}" includes="**/Bundle*.properties" />
            <fileset dir="${src_j2se.dir}" includes="**/resources/*" />
            <fileset dir="${j2sebuild.dir}" includes="**/*.class" />
        </jar>

        <antcall target="proguard.j2seapp" />

        <copy file="${j2sebuild.dir}/${ant.project.name}_j2se.jar"
              tofile="${dist}/${ant.project.name}_j2se.jar"
        />

        <antcall target="sign">
            <param name="jar.tosign"
                   value="${dist}/${ant.project.name}_j2se.jar"
            />
        </antcall>

    </target>

	
	

	<target name="proguard.j2seapp_task" unless="skip.proguard">
		<taskdef name="proguard"
		         classpath="${proguardLib}"
		         classname="proguard.ant.ProGuardTask"
		/>
		<move file="${j2sebuild.dir}/${ant.project.name}_j2se.jar"
		      tofile="${j2sebuild.dir}/${ant.project.name}_j2se_unopt.jar"
		/>
		<proguard forceprocessing="true"
		          shrink="${proguard.shrink}"
		          defaultpackage=""
		          optimize="${proguard.optimize}"
		          obfuscate="false"
		          printusage="false"
		          overloadaggressively="false"
		          verbose="true"
		          ignorewarnings="true"
		>
			<libraryjar file="${proguard.java.rt.lib}" />
			<libraryjar file="${jopt-simple.jar}" />
            <libraryjar file="${jcalendar.jar}" />
            <libraryjar file="${swingx.jar}" />
            <libraryjar file="${swingx-ws.jar}" />
            <libraryjar file="${swinglayout.jar}" />
            <libraryjar file="${rxtxcomm.jar}" />
			<libraryjar file="${dist}/lib${ant.project.name}.jar" />
			<outjar path="${j2sebuild.dir}/${ant.project.name}_j2se.jar" />
                     -injar ${j2sebuild.dir}/${ant.project.name}_j2se_unopt.jar
                     -optimizationpasses 2
                     -keepclasseswithmembers public class * {
                          public static void main(java.lang.String[]); }
            </proguard>
	</target>

	<target name="proguard.j2seapp" depends="proguard.j2seapp_task" />


	<!-- OPTIMIZE THE WABA APPLICATION
	  -->
   <target name="proguard.wabaapp_task" unless="skip.proguard">
        <taskdef name="proguard"
                 classpath="${proguardLib}"
                 classname="proguard.ant.ProGuardTask"
        />
        <move file="${wababuild.dir}/${ant.project.name}_waba.jar"
              tofile="${wababuild.dir}/${ant.project.name}_waba_unopt.jar"
        />
        <proguard forceprocessing="true"
                  shrink="${proguard.shrink}"
                  defaultpackage=""
                  optimize="${proguard.optimize}"
                  obfuscate="false"
                  printusage="false"
                  overloadaggressively="false"
                  verbose="true"
                  ignorewarnings="true"
        >
            <libraryjar file="${proguard.java.rt.lib}" />
            <libraryjar file="${superwaba.jar}" />
            <libraryjar file="${dist}/lib${ant.project.name}.jar" />
            <outjar path="${wababuild.dir}/${ant.project.name}_waba.jar" />
              -injar ${wababuild.dir}/${ant.project.name}_waba_unopt.jar
              -injar ${swcollections.jar}(!META-INF/**)
              -optimizationpasses 3
              -printmapping ${dist}/${ant.project.name}_waba.map
              -keep public class BT747
              -keep public class sun.audio.AudioStream
              -keep public class * implements gps.log.in.GPSLogConvert
              -keep public class * extends waba.ui.MainWindow
              -keep public class * implements bt747.lang.TxtInterface
              -keep public class * extends gps.connection.GPSPort
              -keep public class * {
                public static void setGpsPortInstance(gps.connection.GPSPort);
              }
              -keep public class bt747.Version { *; }
            </proguard>
    </target>

    <target name="proguard.wabaapp" depends="proguard.wabaapp_task" />

	
	<!-- BUILD WABA DISTRIBUTION
	[Currently under debug]
	1. BUILD THE WABA APP.
	2. POTENTIALLY OPTIMIZE THE APP
	3. SIGN THE APP
	-->
	<target name="dist.waba" depends="build.wabaapp">
		<buildnumber file="build.num" />
		<delete file="MANIFEST.MF" />
		<manifest file="MANIFEST.MF">
			<attribute name="Built-By" value="${user.name}" />
			<attribute name="Main-Class" value="BT747" />
			<attribute name="Implementation-Version"
			           value="${full.build.version}"
			/>
			<attribute name="Class-Path"
			           value="libBT747.jar dist/libBT747.jar lib/libBT747.jar RXTXcomm.jar collections-superwaba.jar swing-layout-1.0.3.jar swingx.jar swingx-ws.jar ../lib/swingx.jar ../lib/swingx-ws.jar ../lib/RXTXcomm.jar ../${swinglayout.jar} ../lib/jcalendar-1.3.2.jar lib/RXTXcomm.jar lib/swingx-ws.jar lib/swingx.jar lib/swing-layout-1.0.3.jar lib/jcalendar-1.3.2.jar"
			/>
		</manifest>
		<!-- It might be possible to read the version in the application:
	             TheMainClass.class.getPackage().getImplementationVersion() ); -->

		<!-- 
		<jar manifest="MANIFEST.MF" jarfile="${wababuild.dir}/${ant.project.name}_waba.jar" compress="true">
			<fileset dir="${wababuild.dir}" includes="**/*.class" />
		</jar>
		-->

		<jar manifest="MANIFEST.MF"
		     jarfile="${wababuild.dir}/${ant.project.name}_waba.jar"
		     compress="true"
		>
			<fileset dir="${wababuild.dir}" includes="**/*.class" />
		</jar>

		<antcall target="proguard.wabaapp" />

		<copy file="${wababuild.dir}/${ant.project.name}_waba.jar"
		      tofile="${dist}/${ant.project.name}_waba.jar"
		/>

		<antcall target="sign">
			<param name="jar.tosign"
			       value="${dist}/${ant.project.name}_waba.jar"
			/>
		</antcall>
	</target>

	<target name="proguard.lib" depends="proguard.lib_task" />

	<property name="libtmp_suffix" value="_j2se_libtmp" />
	<property name="libj2se_suffix" value="_j2se" />
	<target name="proguard.lib_task" unless="skip.proguard">
		<move file="${rxtxbuild.dir}/${ant.project.name}${libtmp_suffix}.jar"
		      tofile="${rxtxbuild.dir}/${ant.project.name}${libtmp_suffix}_unopt.jar"
		/>
		<taskdef name="proguard"
		         classpath="${proguardLib}"
		         classname="proguard.ant.ProGuardTask"
		/>
		<!--
		                        -injar ${swcollections.jar}(!META-INF/**)
		-->
		<proguard forceprocessing="true"
		          shrink="${proguard.shrink}"
		          defaultpackage=""
		          optimize="${proguard.optimize}"
		          obfuscate="false"
		          printusage="false"
		          overloadaggressively="false"
		          verbose="true"
		          ignorewarnings="true"
		>
			<libraryjar file="${proguard.java.rt.lib}" />
            <libraryjar file="${jcalendar.jar}" />
            <libraryjar file="${swingx.jar}" />
            <libraryjar file="${swingx-ws.jar}" />
            <libraryjar file="${swinglayout.jar}" />
            <libraryjar file="${rxtxcomm.jar}" />
			<outjar path="${rxtxbuild.dir}/${ant.project.name}${libtmp_suffix}.jar"
			/>
             	        -printmapping ${rxtxbuild.dir}/${ant.project.name}${libtmp_suffix}.map
                        -injar ${rxtxbuild.dir}/${ant.project.name}${libtmp_suffix}_unopt.jar
			             (!BT747.class,
                          !net/sf/bt747/waba/**,
			              !bt747/*_view/**,
			              !bt747/gps/connection/GPSWabaPort.class)
                        -optimizationpasses 2
                        -keep public class bt747.sys.Interface { *; }
			            -keep public class bt747.sys.Settings { *; }
			            -keep public class bt747.sys.File { *; }
			            -keep public class gps.log.out.CommonOut { *; }
			            -keep public class gps.log.in.CommonIn { *; }
			            -keep public class gps.log.out.AllWayPointStyles { public static final int *; }
                        -keep public class gps.BT747Constants { *; }
                        -keep public class gps.GpsEvent { *; }
                        -keep public class gps.GPSListener { *; }
                        -keep public class gps.log.* { *; }
		                -keep public class gps.log.in.WindowedFile { *; }
                        -keep public class bt747.model.* { *; }
                        -keep public class bt747.model.BT747View { *; }
                        -keep public class gps.convert.FileUtil {*; }
                        -keep public class gps.log.in.GPSLogConvert { *; }
                        -keep public class * implements gps.log.in.GPSLogConvert { *; }
			            -keep public class gps.log.in.MultiLogConvert { *; }
                        -keep public class * implements gps.log.out.GPSFile { *; }
                        -keep public class gps.log.out.GPSFile { *; }
                        -keep public class gps.log.in.GPSInputConversionFactory { *; }
                        -keep public class * extends gps.connection.GPSPort { *; }
			            -keep public class bt747.Version { *; }
            -keep public class net.sf.bt747.j2se.filefilters.* { *; }
            -keep public class net.sf.bt747.j2se.map.* { *; }
            -keep public class net.sf.bt747.j2se.system.J2SEGeneric { public *; }
			-keep public interface net.sf.bt747.j2se.system.J2SEMessageListener { *; }
            -keep public class bt747.lang.* { public *; }
            -keep public interface bt747.sys.interfaces.* {
                public *;
			}
        -keep public class bt747.interfaces.* {
            public *;
        }
                        -keep public class * {
	                       public static void setGpsPortInstance(gps.connection.GPSPort);
	                    }
                        -keep public class gps.connection.GPSPort  { *; }
               </proguard>

	</target>


	<target name="dist.libj2se" unless="libj2se.uptodate">
		<!-- First build normal target -->
		<build.rxtx suffix="${libtmp_suffix}"
		            build.j2se="yes"
		            no.waba="yes"
		            build.lib="yes"
		/>

		<antcall target="proguard.lib" />
		<copy file="${rxtxbuild.dir}/${ant.project.name}${libtmp_suffix}.jar"
		      tofile="${dist}/lib${ant.project.name}.jar"
		/>

		<antcall target="sign">
			<param name="jar.tosign"
			       value="${dist}/lib${ant.project.name}.jar"
			/>
		</antcall>
	</target>

	<macrodef name="macro.run.rxtx">
		<attribute name="main-class" />
		<attribute name="main-class-args" />
		<attribute name="suffix" default="_waba_j2se" />
		<sequential>
			<build.rxtx suffix="@{suffix}" build.j2se="@{suffix}" />

			<!--
	        <antcall target="rxtxjar">
            <param name="build.j2se" value="yes" />
            <param name="name.suffix" value="${name.suffix}" />
	        </antcall>
	        -->

			<!-- <java classname="waba.applet.Applet" fork="true" spawn="true">
	        -->
			<java classname="@{main-class}" fork="true" spawn="false">
				<classpath>
					<pathelement path="${rxtxcomm.jar}" />
					<pathelement path="${swinglayout.jar}" />
					<pathelement path="${jcalendar.jar}" />
					<pathelement path="${swcollections.jar}" />
					<pathelement path="${rxtxbuild.dir}/${ant.project.name}@{suffix}.jar"
					/>
				</classpath>
				<arg line="@{main-class-args}" />
			</java>
		</sequential>
	</macrodef>

	<target name="run.j2sewaba">
		<macro.run.rxtx main-class="waba.applet.Applet"
		                main-class-args="/w 320 /h 320 /x 500 /scale 1 /bpp 8 bt747.j2se_view.BT747"
		/>
	</target>

	<target name="run.j2se">
		<macro.run.rxtx main-class="${j2se.main}" main-class-args="" />
	</target>

	<target name="run.j2se2">
		<macro.run.rxtx main-class="${j2se.main2}" main-class-args="" />
	</target>

	<target name="run.rxtx">
		<macro.run.rxtx main-class="waba.applet.Applet"
		                main-class-args="/w 320 /h 320 /scale 1 /bpp 8 BT747"
		/>
	</target>

	<target name="proguard.rxtx" depends="rxtxjar,proguard.rxtx_task">
	</target>

	<target name="proguard.rxtx_task" unless="skip.proguard">
		<taskdef name="proguard"
		         classpath="${proguardLib}"
		         classname="proguard.ant.ProGuardTask"
		/>
		<getsuffix />
		<move file="${rxtxbuild.dir}/${ant.project.name}${suffix}.jar"
		      tofile="${rxtxbuild.dir}/${ant.project.name}${suffix}_unopt.jar"
		/>

		<proguard shrink="false"
		          defaultpackage=""
		          optimize="false"
		          obfuscate="false"
		          allowaccessmodification="no"
		          flattenpackagehierarchy=""
		          printusage="false"
		          overloadaggressively="false"
		          verbose="true"
		          ignorewarnings="true"
		>
			<!--
			<keep name="${mainClass}" />
			<keep name="gps.parser.*" />
			<keep name="bt747.j2se_view.BT747" />
			<keep name="gps.connection.GPSRxTxPort" />
			<keep name="gps.parser.NewLogConvert" />

            When using Superwaba libraries for reference:
            <libraryjar file="${superwaba.jar}" />
			-->
			<keep name="bt747.j2se_view.BT747" />
			<libraryjar file="${proguard.java.rt.lib}" />
			<libraryjar file="${swcollections.jar}" />
		    <libraryjar file="${swingx.jar}" />
		    <libraryjar file="${swingx-ws.jar}" />
            <libraryjar file="${rxtxcomm.jar}" />
            <libraryjar file="${superwaba.jar}" />
			<injar path="${rxtxbuild.dir}/${ant.project.name}${suffix}_unopt.jar"
			/>
			<outjar path="${rxtxbuild.dir}/${ant.project.name}${suffix}.jar" />
                -keep public class * implements gps.log.in.GPSLogConvert
                -keep public class * extends waba.ui.MainWindow
 		        -keep public class * implements bt747.lang.TxtInterface
                -keep public class * extends gps.connection.GPSPort
    	        -keep public class * {
    	          public static void setGpsPortInstance(gps.connection.GPSPort);
    	        }
			    -keep public class bt747.Version { *; }
                -keep public interface bt747.interfaces.* {
			        public *;
			    }
            -keep public class net.sf.bt747.j2se.filefilters.* { *; }
            -keep public class net.sf.bt747.j2se.map.* { *; }
		        -keep public class net.sf.bt747.j2se.system.J2SEGeneric { public *; }
    			-keep public class BT747
 		        -keep public class sun.audio.AudioStream
		        -keep public class bt747.j2se_view.BT747
                -keepclasseswithmembers public class * {
                    public static void main(java.lang.String[]); }

            -keep public class bt747.lang.* { public *; }
	        </proguard>
		<delete file="${rxtxbuild.dir}/${ant.project.name}${suffix}_unopt.jar">
		</delete>
	</target>

	<target name="build.j2se">
		<antcall target="proguard.rxtx">
			<param name="build.j2se" value="_j2se" />
		</antcall>

		<!--
        <antcall target="rxtxjar">
            <param name="build.j2se" value="_j2se" />
        </antcall>
        -->

		<copy file="${rxtxbuild.dir}/${ant.project.name}_rxtx.jar"
		      tofile="${dist}/${ant.project.name}_waba_j2se.jar"
		/>
		<antcall target="sign">
			<param name="jar.tosign"
			       value="${dist}/${ant.project.name}_waba_j2se.jar"
			/>
		</antcall>

	</target>

	<property name="java.src.version" value="1.3" />
	<property name="java.target.version" value="1.1" />

	<!-- Filesets for normal build -->
	<fileset dir="." id="waba_only_sources">
		<include name="${src.dir}/**/*.java" />
		<include name="${src_waba.dir}/**/*.java" unless="build.j2se" />
		<include name="${src_j2se.dir}/**/*.java" if="build.j2se" />
	</fileset>

	<!-- filesets for rxtxbuild -->
	<fileset dir="." id="rxtx_src">
		<include name="${src_rxtx.dir}/**/*.java" />
		<include name="${src.dir}/**/*.java" />
		<include name="${src_waba.dir}/**/*.java" />
		<include name="${src_j2se.dir}/**/*.java" />
	</fileset>


	<!-- Compile -->
	<target name="build">

		<delete dir="{build.dir}/waba" />
		<mkdir dir="${build.dir}/waba" />

		<mkdir dir="${dist}" />
		<copy_src srcid="waba_only_sources" dest.dir="${build.dir}/waba/src" />

		<javac srcdir="${build.dir}/waba/src"
		       destdir="${build.dir}/waba"
		       target="1.1"
		       source="1.2"
		       optimize="${java.optimize}"
		       debug="${java.debug}"
		       deprecation="true"
		       encoding="iso-8859-15"
		>
			<include name="**/*.java" />
			<classpath refid="classpath" />
		</javac>
	</target>

	<!-- The target is currently not working since ant references the rt.jar
	 regardless of the parameters. -->

	<uptodate property="wabalang.uptodate" targetfile="${waba_lang.jar}">
		<srcfiles dir="${superwaba_root}/src/java/waba/lang" includes="**" />
	</uptodate>

	<target name="waba.lang" unless="wabalang.uptodate" />
	<target name="waba.lang.do">
		<delete dir="${build.dir}/wabalang" />
		<mkdir dir="${build.dir}/wabalang" />
		<property name="build.sysclasspath" value="ignore" />
		<echoproperties prefix="build.sys" />
		<javac srcdir="${superwaba_root}/src/java/waba/lang"
		       destdir="${build.dir}/wabalang"
		       verbose="yes"
		       target="1.1"
		       source="1.2"
		       includeantruntime="no"
		       includejavaruntime="false"
		       optimize="${java.optimize}"
		       debug="${java.debug}"
		       classpathref="wabalangclasspath"
		       extdirs=""
		       bootclasspath=""
		       classpath=""
		       encoding="iso-8859-15"
		>
			<include name="*.java" />
		</javac>
		<jar jarfile="${wabalang.jar}" compress="true">
			<fileset dir="${build.dir}/wabalang" includes="**/*.class" />
		</jar>
		<antcall target="sign">
			<param name="jar.tosign" value="${wabalang.jar}" />
		</antcall>
	</target>


	<!-- rxtxbuild
	
	 -->
	<target name="rxtxbuild">
		<getsuffix />
		<delete dir="${rxtxbuild.dir}" />
		<mkdir dir="${rxtxbuild.dir}" />
		<delete dir="${rxtxsrc.dir}" />
		<mkdir dir="${rxtxsrc.dir}" />

		<echoproperties prefix="no.waba" />

		<copy_src srcid="rxtx_src" dest.dir="${rxtxsrc.dir}" rxtx="true" />

		<condition property="exclude.waba">
			<istrue value="${no.waba}" />
		</condition>
		<condition property="is.lib">
			<istrue value="${build.lib}" />
		</condition>
		<condition property="is.j2se">
			<istrue value="${build.j2se}" />
		</condition>
		<condition property="build.classpath" value="j2seclasspath">
			<istrue value="${build.j2se}" />
		</condition>
		<condition property="build.classpath" value="rxtxclasspath">
			<isfalse value="${build.j2se}" />
		</condition>


		<echoproperties prefix="exclude.waba">
		</echoproperties>
		<echoproperties prefix="is.">
		</echoproperties>
		<!-- No longer deleting these for the libary until
			     Txt is really local.
          <include name="*/bt747/lang/**" if="is.lib" />
          <include name="*/bt747/Txt.java" if="is.lib" />
                <include name="${src_j2se.dir}/bt747/j2se_view/BT747.java"
                         if="exclude.waba"
                />
                <include name="*/bt747/*view/**" if="is.lib" />
                <include name="*/bt747/waba_view/AppController.java"
                         if="is.lib"
		-->
		<delete verbose="no">
			<fileset dir="${rxtxsrc.dir}">
				<include name="${src_j2se.dir}/**" unless="is.j2se" />
				<include name="${src_waba.dir}/**" if="exclude.waba" />
				<include name="*/bt747/*view/**" if="is.lib" />
                <include name="${src_j2se.dir}/net/sf/bt747/j2se/app/**" if="is.lib" />
                <include name="${src_j2se.dir}/net/iharder/dnd/**" if="is.lib" />
			</fileset>
		</delete>
		<javac verbose="no"
		       srcdir="${rxtxsrc.dir}"
		       destdir="${rxtxbuild.dir}"
		       optimize="${java.optimize}"
		       debug="${java.debug}"
		       classpathref="${build.classpath}"
		       encoding="iso-8859-15"
		>
			<include name="**/*.java" />
		</javac>
		<copy todir="${rxtxbuild.dir}">
			<fileset dir="src">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<target name="symbianbuild">

		<mkdir dir="${symbianbuild.dir}" />
		<delete dir="${symbiansrc.dir}" />
		<mkdir dir="${symbiansrc.dir}" />

		<copy_src srcid="waba_only_sources" dest.dir="${symbiansrc.dir}" />

		<copy todir="${symbiansrc.dir}">
			<fileset dir="src">
				<include name="gps/connection/GPSWabaSocketPort.java" />
			</fileset>
		</copy>
		<replace file="${symbiansrc.dir}bt747/waba_view/AppBT747.java"
		         encoding="${encoding}"
		         token="GPSWabaPort"
		         summary="yes"
		         value="GPSWabaSocketPort"
		/>

		<delete dir="${symbiansrc.dir}/gps/parser">
		</delete>
		<javac srcdir="${symbiansrc.dir}"
		       destdir="${symbianbuild.dir}"
		       target="1.1"
		       source="1.2"
		       optimize="${java.optimize}"
		       debug="${java.debug}"
		       deprecation="true"
		       encoding="iso-8859-15"
		>
			<include name="**/*.java" />
			<classpath refid="classpath" />
		</javac>
		<copy todir="${symbianbuild.dir}">
			<fileset dir="src">
				<exclude name="**/*.java" />
			</fileset>
		</copy>

	</target>


	<target name="filebuild" depends="updatedate">

		<mkdir dir="${filebuild.dir}" />
		<delete dir="${filesrc.dir}" />
		<mkdir dir="${filesrc.dir}" />

		<copy todir="${filesrc.dir}">
			<fileset dir="src">
				<include name="**/*.java" />
				<exclude name="bt747/j2se_view/*" unless="build.j2se" />
				<exclude name="bt747/j2me_view/*" unless="build.j2me" />
			</fileset>
		</copy>
		<replace file="${filesrc.dir}bt747/waba_view/AppBT747.java"
		         encoding="${encoding}"
		         token="GPSWabaPort"
		         summary="yes"
		         value="GPSFilePort"
		/>
		<replace file="${filesrc.dir}/bt747/waba_view/AppController.java"
		         encoding="${encoding}"
		         token="//#if RXTX"
		         summary="yes"
		         value=""
		/>

		<javac srcdir="${filesrc.dir}"
		       destdir="${filebuild.dir}"
		       source="1.3"
		       target="1.1"
		       optimize="${java.optimize}"
		       debug="${java.debug}"
		       classpathref="classpath"
		       encoding="iso-8859-15"
		>
			<include name="**/*.java" />
			<exclude name="gps/connection/GPSWabaPort.java*" />
			<exclude name="gps/connection/GPSRxTxPort.java*" />
			<exclude name="gps/model/*" />
			<exclude name="gps/parser/*" unless="use.newparser" />
		</javac>
		<copy todir="${filebuild.dir}">
			<fileset dir="src">
				<exclude name="**/*.java" />
			</fileset>
		</copy>

	</target>


	<!-- Target for pur j2se environment - builds library. -->
	<!-- Package classes -->

	<target name="jar" depends="build">
		<jar jarfile="${build.dir}/${ant.project.name}.jar" compress="true">
			<fileset dir="${build.dir}/waba" includes="**/*.class" />
		</jar>
	</target>

	<property name="current.main.class" value="${j2se.main}" />
	<target name="rxtxjar" depends="rxtxbuild">
		<getsuffix />
		<buildnumber file="build.num" />
		<delete file="MANIFEST.MF" />
		<manifest file="MANIFEST.MF">
			<attribute name="Built-By" value="${user.name}" />
			<attribute name="Main-Class" value="${current.main.class}" />
			<attribute name="Implementation-Version"
			           value="${full.build.version}"
			/>
			<attribute name="Class-Path"
			           value="RXTXcomm.jar collections-superwaba.jar swing-layout-1.0.3.jar ../lib/RXTXcomm.jar ../lib/collections-superwaba.jar ../${swinglayout.jar} lib/RXTXcomm.jar lib/collections-superwaba.jar lib/swing-layout-1.0.3.jar"
			/>
		</manifest>
		<!-- It might be possible to read the version in the application:
             TheMainClass.class.getPackage().getImplementationVersion() ); -->

		<jar manifest="MANIFEST.MF"
		     jarfile="${rxtxbuild.dir}/${ant.project.name}${suffix}.jar"
		     compress="true"
		>
			<fileset dir="${rxtxbuild.dir}" includes="**/*.class" />
		</jar>
		<copy tofile="${rxtxbuild.dir}/lib${ant.project.name}${suffix}.jar"
		      file="${rxtxbuild.dir}/${ant.project.name}${suffix}.jar"
		/>
		<!--
		<retroweaver
			inputjar="${rxtxbuild.dir}/${ant.project.name}${suffix}.jar"
			outputjar="${rxtxbuild.dir}/${ant.project.name}${suffix}_retro.jar"
			target="1.2"
			>
		</retroweaver>
		<move file="${rxtxbuild.dir}/${ant.project.name}${suffix}_retro.jar"
			tofile="${rxtxbuild.dir}/${ant.project.name}${suffix}.jar"/>
		-->
	</target>


	<target name="symbianjar" depends="symbianbuild">

		<jar jarfile="${symbianbuild.dir}/${ant.project.name}_symbian.jar"
		     compress="true"
		>
			<fileset dir="${symbianbuild.dir}" includes="**/*.class" />
		</jar>
		<taskdef name="proguard"
		         classpath="${proguardLib}"
		         classname="proguard.ant.ProGuardTask"
		/>
		<move file="${symbianbuild.dir}/${ant.project.name}_symbian.jar"
		      tofile="${symbianbuild.dir}/${ant.project.name}_symbian_unopt.jar"
		/>
		<proguard shrink="true"
		          defaultpackage=""
		          optimize="${proguard.optimize}"
		          obfuscate="${proguard.obfuscate}"
		          allowaccessmodification="${proguard.accessmodification}"
		          flattenpackagehierarchy=""
		          repackageclasses=""
		          printusage="false"
		          overloadaggressively="${proguard.overload}"
		          verbose="true"
		          ignorewarnings="true"
		          printmapping="${dist}/${ant.project.name}_symbian.mapping"
		>
			<keep name="${mainClass}" />

			<!-- to check if methods are Waba compatible -->
			<libraryjar file="${wabalang.jar}" />

			<!--
            <libraryjar file="${proguard.java.rt.lib}" />
            -->
			<libraryjar file="${superwaba.jar}" />
			<injar path="${symbianbuild.dir}/${ant.project.name}_symbian_unopt.jar"
			/>
			<injar path="${swcollections.jar}" />
			<outjar path="${symbianbuild.dir}/${ant.project.name}_symbian.jar"
			/>
			<keep name="gps.parser.*" />
			<keep name="gps.connection.*" />
		</proguard>
		<copy todir="${dist}">
			<fileset dir="${symbianbuild.dir}">
				<include name="**/*.jar" />
			</fileset>
		</copy>
		<antcall target="sign">
			<param name="jar.tosign"
			       value="${dist}/${ant.project.name}_symbian.jar"
			/>
		</antcall>
	</target>

	<target name="filejar" depends="filebuild">

		<jar jarfile="${filebuild.dir}/${ant.project.name}_file.jar"
		     compress="true"
		>
			<fileset dir="${filebuild.dir}" includes="**/*.class" />
		</jar>
		<copy todir="${dist}">
			<fileset dir="${filebuild.dir}">
				<include name="**/*.jar" />
			</fileset>
		</copy>
		<antcall target="sign">
			<param name="jar.tosign"
			       value="${dist}/${ant.project.name}_file.jar"
			/>
		</antcall>

	</target>

	<target name="proguard_task" depends="waba.lang,jar" unless="skip.proguard">
		<taskdef name="proguard"
		         classpath="${proguardLib}"
		         classname="proguard.ant.ProGuardTask"
		/>
		<move file="${build.dir}/${ant.project.name}.jar"
		      tofile="${build.dir}/${ant.project.name}_unopt.jar"
		/>
		<proguard shrink="true"
		          defaultpackage=""
		          optimize="${proguard.optimize}"
		          obfuscate="${proguard.obfuscate}"
		          allowaccessmodification="${proguard.accessmodification}"
		          flattenpackagehierarchy=""
		          repackageclasses=""
		          printusage="false"
		          overloadaggressively="${proguard.overload}"
		          verbose="true"
		          ignorewarnings="true"
		          optimizationpasses="${proguard.optimizationpasses}"
		          printmapping="${dist}/${ant.project.name}.mapping"
		>
			<keep name="${mainClass}" />

			<!-- to check if methods are Waba compatible -->
			<libraryjar file="${wabalang.jar}" />

			<!--
			<libraryjar file="${proguard.java.rt.lib}" />
			-->
			<libraryjar file="${superwaba.jar}" />
			<injar path="${build.dir}/${ant.project.name}_unopt.jar" />
			<outjar path="${build.dir}/${ant.project.name}.jar" />
            -injar ${swcollections.jar}(!META-INF/**)
		    -keep public class * implements bt747.lang.TxtInterface
		</proguard>
	</target>


	<target name="proguard" depends="jar">
		<antcall target="proguard_task">
		</antcall>
	</target>


	<!-- ========================================= -->
	<!-- Build the SuperWaba binaries              -->
	<!-- ========================================= -->
	<!-- SuperWaba binaries need to run on the SuperWaba virtual machine -->
	<!-- and have a specific binary code.                                -->
	<!-- =============================================================== -->


	<!-- Execute WARP -->
	<target name="warp" depends="proguard">

		<java dir="${build.dir}"
		      classname="superwaba.tools.Warp"
		      fork="true"
		      classpathref="utils"
		>
			<arg value="c" />
			<arg value="/c" />
			<arg value="BT74" />
			<arg value="${ant.project.name}" />
			<arg value="${ant.project.name}.jar" />
		</java>

	</target>

	<!-- Execute WARP -->
	<target name="symbianwarp" depends="symbianjar">

		<java dir="${symbianbuild.dir}"
		      classname="superwaba.tools.Warp"
		      fork="true"
		      classpathref="utils"
		>
			<arg value="c" />
			<arg value="/x" />
			<arg value="GPSFilePort" />
			<arg value="/c" />
			<arg value="BT74" />
			<!--
            <arg value="/v" />
            <arg value="${build_version}" />
            -->
			<arg value="${ant.project.name}" />
			<arg value="${ant.project.name}_symbian.jar" />
		</java>

	</target>


	<!-- Prepare EXEGEN execution -->
	<target name="prepare-exegen">

		<mkdir dir="icons" />
		<copy todir="${build.dir}">
			<fileset dir="icons">
				<include name="*.bmp" />
			</fileset>
		</copy>

	</target>

	<target name="symbianprepare-exegen">

		<mkdir dir="icons" />
		<copy todir="${symbianbuild.dir}">
			<fileset dir="icons">
				<include name="*.bmp" />
			</fileset>
		</copy>

	</target>

	<!-- Execute EXEGEN 
	  -->
	<target name="exegen" depends="warp, prepare-exegen">
		<java dir="${build.dir}"
		      classname="superwaba.tools.Exegen"
		      fork="true"
		      classpathref="utils"
		>
			<arg value="/INST" />
			<!-- <arg value="/SIS"/> -->
			<!-- <arg value="/SH"/> -->
			<arg value="/I" />
			<arg value="BT747_" />
			<arg value="/V" />
			<arg value="${build_version}" />
			<arg value="/c" />
			<arg value="BT74" />
			<arg value="${ant.project.name}" />
			<arg value="" />
			<arg value="${ant.project.name}" />
		</java>

	</target>

	<!-- Execute EXEGEN -->
	<target name="symbianexegen" depends="symbianwarp, symbianprepare-exegen">

		<java dir="${symbianbuild.dir}"
		      classname="superwaba.tools.Exegen"
		      fork="true"
		      classpathref="utils"
		>
			<!-- <arg value="/INST"/> -->
			<arg value="/SIS" />
			<arg value="/I" />
			<arg value="BT747_" />
			<arg value="/c" />
			<arg value="BT74" />
			<arg value="${ant.project.name}" />
			<arg value="" />
			<arg value="${ant.project.name}" />
		</java>

	</target>


	<!-- Execute EXEGEN with WinCE EXE -->
	<target name="exegen-exe" depends="warp, prepare-exegen">

		<java dir="${build.dir}"
		      classname="superwaba.tools.Exegen"
		      fork="true"
		      classpathref="utils"
		>
			<arg value="/I" />
			<arg value="BT747_" />
			<arg value="/c" />
			<arg value="BT74" />
			<arg value="/e" />
			<arg value="${ant.project.name}" />
			<arg value="" />
			<arg value="${ant.project.name}" />
		</java>

	</target>

	<!-- Execute EXEGEN with WinCE CAB   -->
	<target name="exegen-cab" depends="warp, prepare-exegen" >

		<java dir="${build.dir}"
		      classname="superwaba.tools.Exegen"
		      fork="true"
		      classpathref="utils"
		>
			<arg value="/I" />
			<arg value="BT747_" />
			<arg value="/c" />
			<arg value="BT74" />
			<arg value="/z" />
			<arg value="${ant.project.name}" />
			<arg value="" />
			<arg value="${ant.project.name}" />
		</java>

	</target>

	<!-- Execute WARP and populate distribution directory -->
	<target name="all-warp" depends="warp">

		<move file="${build.dir}/${ant.project.name}.pdb" todir="${dist}" />

	</target>

	<!-- Execute EXEGEN and populate distribution directory -->
	<target name="all-exegen" depends="exegen, all-warp">

		<move todir="${dist}" file="${build.dir}/${ant.project.name}.prc" />
		<move todir="${dist}" file="${build.dir}/install.exe" />

	</target>

	<!-- Execute EXEGEN with WinCE EXE and populate distribution directory -->
	<target name="all-exegen-exe" depends="exegen-exe, all-warp">

		<move todir="${dist}">

			<fileset dir="${build.dir}">
				<include name="${ant.project.name}.prc" />
				<include name="**/*.exe" />
				<include name="*.exe" />
			</fileset>

		</move>

	</target>

	<!-- Execute EXEGEN with WinCE CAB and populate distribution directory -->
	<target name="all-exegen-cab" depends="exegen-cab, all-warp">

		<move todir="${dist}">

			<fileset dir="${build.dir}">
				<include name="${ant.project.name}.prc" />
				<include name="*.CAB" />
				<include name="*.ini" />
				<include name="*.bat" />
				<include name="*.exe" />
			</fileset>

		</move>

	</target>

	<!--
	Build the distribution for PDA's
	-->
	<target name="dist.pda" depends="exegen, exegen-exe, exegen-cab, all-warp">
		<move todir="${dist}">
			<fileset dir="${build.dir}">
				<include name="${ant.project.name}.prc" />
				<include name="**/*.exe" />
				<include name="*.CAB" />
				<include name="*.ini" />
				<include name="*.bat" />
				<include name="*.exe" />
				<include name="${ant.project.name}.jar" />
			</fileset>
		</move>
		<antcall target="sign">
			<param name="jar.tosign" value="${dist}/${ant.project.name}.jar" />
		</antcall>

	</target>

	<!-- Execute EXEGEN with WinCE CAB and populate distribution directory -->
	<target name="dist" depends="dist.j2se,dist.pda,dist.rxtx">

	</target>


	<!-- ========================================================== -->
	<!-- Common targets (generic tasks/targets)                     -->
	<!-- ========================================================== -->

	<!-- Stuff to build war target - under development -->

	<target name="pack.test">
		<war destfile="${dist}/${ant.project.name}.war"
		     webxml="src/metadata/BT747.xml"
		>
			<fileset dir="${dist}/" includes="BT747*rxtx*jar" />
			<lib dir="ext">
				<exclude name="jdbc1.jar" />
			</lib>
			<!--
		  <classes dir="${build.dir}/main"/>
		  <zipfileset dir="src/graphics/images/gifs"
		              prefix="images"/>
		              -->
		</war>

	</target>
	<target name="pack" depends="pack.init,jws.pack">
		<delete file="${build.dir}/wars/${application}.war" />
		<war destfile="${build.dir}/wars/${application}.war"
		     webxml="${dist}/src/WEB-INF/web.xml"
		     basedir="${dist}/src"
		>
			<lib dir="lib">
				<include name="jnlp-servlet.jar" />
				<!--
			  <include name="ext/xalan.jar"/>
			  -->
			</lib>
		</war>
	</target>

	<target name="pack.init">
		<mkdir dir="${build.dir}/wars" />
		<mkdir dir="${build.dir}/sign" />
		<mkdir dir="${dist}/src/app" />
		<mkdir dir="${dist}/src/WEB-INF" />
	</target>

	<target name="jws.web-inf">
		<copy todir="${dist}/src/WEB-INF" overwrite="yes">
			<fileset dir="cfg/war" includes="**/*.xml" />
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
		<fixcrlf srcdir="${dist}/src/WEB-INF"
		         includes="**/*.xml"
		         eol="lf"
		         eof="remove"
		/>
	</target>

	<target name="jws.jnlp-init">
		<copy tofile="${dist}/src/app/${application}.jnlp" overwrite="yes">
			<fileset dir="cfg/jws" includes="jnlp.head" />
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
	</target>

	<target name="jws.jnlp-end">
		<copy todir="${dist}/src/app" overwrite="yes">
			<fileset dir="cfg/jws" includes="jnlp.footer" />
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
		<concat destfile="${dist}/src/app/${application}.jnlp" append="true">
			<filelist dir="${dist}/src/app" files="jnlp.footer" />
		</concat>
		<delete file="${dist}/src/app/jnlp.footer" />
	</target>

	<target name="jws.pack.lib">
		<copy todir="${build.dir}/sign"
		      file="${lib.dir}/${lib.name}"
		      overwrite="yes"
		/>
		<signjar jar="${build.dir}/sign/${lib.name}"
		         alias="${keytool.alias}"
		         storepass="${keytool.passwd}"
		         keystore="${keytool.keystore}"
		/>
		<copy todir="${dist}/src/app">
			<fileset dir="${build.dir}/sign" includes="${lib.name}" />
			<mapper type="glob" from="*.jar" to="*__V${lib.version}.jar" />
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
		<copy file="cfg/jws/jnlp.lib" todir="${dist}/src/app">
			<filterset>
				<filter token="jarfile" value="${lib.name}" />
				<filter token="version" value="${lib.version}" />
			</filterset>
		</copy>
		<concat destfile="${dist}/src/app/${application}.jnlp" append="true">
			<filelist dir="${dist}/src/app" files="jnlp.lib" />
		</concat>
		<delete file="${dist}/src/app/jnlp.lib" />
	</target>

	<target name="jws.pack" depends="jws.web-inf,jws.jnlp-init">
		<antcall target="jws.pack.lib">
			<param name="lib.name" value="BT747_rxtx.jar" />
			<param name="lib.dir" value="dist" />
			<param name="lib.version" value="${build_version}" />
		</antcall>
		<!--
		<antcall target="jws.pack.lib">
			<param name="lib.name" value="component2.jar"/>
			<param name="lib.dir"  value="libs"/>
			<param name="lib.version" value="4.3"/>
		</antcall>
		-->
		<antcall target="jws.jnlp-end" />
	</target>

	<!-- Another method to package the application - under development -->

	<!-- ========================================= -->
	<!-- Create the standalone client distribution -->
	<!-- ========================================= -->
	<target description="Build the standalone client distribution"
	        name="build.standalone.dist"
	>
		<!--	depends="dist" -->

		<mkdir dir="${dist}/configuration" />

		<!-- build the web archive -->
		<copy todir="${dist}/configuration">
			<fileset dir="." includes="${lib.dir}/**" />
			<fileset dir="." includes="${3rdparty.dir}/**" />
			<fileset dir="." includes="${bin.dir}/*.bat" />
			<fileset dir="." includes="${bin.dir}/*.sh" />
		</copy>

		<zip zipfile="${dist}/standalone.zip" basedir="${dist}/configuration" />
	</target>

	<!-- ======================================= -->
	<!-- Create the webstart client distribution -->
	<!-- ======================================= -->
	<target description="Build the webstart client distribution"
	        name="build.webstart.dist"
	>
		<!--		depends="dist,sign.jars" -->

		<mkdir dir="${dist}" />

		<!-- build the web archive -->
		<war destfile="${dist}/${ant.project.name}.war"
		     webxml="cfg/war/web.xml"
		>

			<fileset dir="." includes="${lib.dir}/**" />
			<fileset dir="." includes="BT747.jnlp" />
			<!--
          	<fileset dir="${web.dir}">
        	<include name="lib/**"/>
			<include name="index.html"/>
	        </fileset>
           -->

			<lib file="${lib.dir}/jnlp-servlet.jar" />
		</war>

	</target>

	<!-- ============================================== -->
	<!-- Create the static webstart client distribution -->
	<!-- ============================================== -->
	<target description="Build the webstart client distribution"
	        name="build.static.webstart.dist"
	>
		<!--		depends="dist,sign.jars" -->

		<mkdir dir="${dist}/configuration" />

		<!-- build the web archive -->
		<copy todir="${dist}/configuration">

			<fileset dir="." includes="${lib.dir}/**" />
			<!-- <fileset dir="." includes="${3rdparty.dir}/**"/> -->

		</copy>

		<copy file="${ant.project.name}.jnlp"
		      toFile="${dist}/configuration/{ant.project.name}.jnlp"
		/>

		<zip zipfile="${dist}/configuration.zip"
		     basedir="${dist}/configuration"
		/>
	</target>

	<!-- ======================================== -->
	<!-- Sign jar files for webstart distribution -->
	<!-- ======================================== -->
	<!--
    <target name="sign.jars" depends="init">
      <signjar keystore="${keystore}"
               alias="${keystore.alias}"
               storepass="${keystore.password}" >
        
        <fileset dir="${lib.dir}"/>
      	<fileset dir="${3rdparty.dir}"/>
      </signjar>
    	
    </target>
    	-->
	<!-- ========================================== -->
	<!-- Create the client webstart CD distribution -->
	<!-- ========================================== -->
	<target name="build.client.cd.dir">
		<!-- depends="init"-->

		<!-- clean out directory -->
		<delete dir="${dist}/webclient_cd" />
		<mkdir dir="${dist}/webclient_cd" />

		<!-- get the install instructions -->
		<copy todir="${dist}/webclient_cd">
			<fileset dir="${client.dir}/docs/install">
				<include name="**" />
			</fileset>

			<!-- copy the database installation file -->
			<!-- <fileset dir="${dist}" includes="systemx-client-db.zip"/> -->
		</copy>

		<!-- copy the required elements over -->
		<copy todir="${dist}/webclient_cd/client">
			<fileset dir="${client.dir}/bin/${environment}" />

			<fileset dir="${client.dir}/installs" />
		</copy>

		<!-- redo the flow of the html for cd install -->
		<delete file="${dist}/webclient_cd/index.html" />
		<delete file="${dist}/webclient_cd/oneTimeSetup.html" />
		<move file="${dist}/webclient_cd/oneTimeSetup_cd.html"
		      tofile="${dist}/webclient_cd/index.html"
		/>

	</target>

	<!-- ========================================================== -->
	<!-- Common targets (generic tasks/targets)                     -->
	<!-- ========================================================== -->


	<!-- Update the language in some files -->
	<target name="updatelang">
	</target>

	<!-- Date information -->

	<property name="encoding" value="UTF-8" />
	<!-- Version information from SVN -->
	<!-- SVN revision information -->
	<!-- To property build.current.revision -->
	<exec outputproperty="build.current.revision" executable="${svnversion}">
		<arg line="-n -c" />
		<redirector>
			<outputfilterchain>
				<tokenfilter>
					<replaceregex pattern="^[0-9]*:?" replace="" flags="g" />
				</tokenfilter>
			</outputfilterchain>
		</redirector>
	</exec>

	<!-- SVN Version information -->
	<!-- To property build.current.version -->
	<exec outputproperty="build.current.version" executable="${svn}">
		<arg line="info" />
		<redirector>
			<outputfilterchain>
				<linecontainsregexp>
					<regexp pattern="^URL:" />
				</linecontainsregexp>
				<tokenfilter>
					<replaceregex pattern=".*\/([^\/]+)$"
					              replace="\1"
					              flags="g"
					/>
				</tokenfilter>
			</outputfilterchain>
		</redirector>
	</exec>
	<property name="full.build.version"
	          value="${build.current.version}.${build.current.revision}"
	/>

	<!-- Update version information in the Version.java file -->
	<target name="updatedate"
	        depends="initdate,updatelang"
	        description="increase build number and set release date"
	>
		<copy_src />
	</target>


	<macrodef name="copy_src"
	          description="Changes sources (in the build dir) with build-time information"
	>
		<attribute name="dest.dir" default="src" />
		<attribute name="rxtx" default="false" />
		<attribute name="srcid" />
		<sequential>
			<setupdates />
			<condition property="@{dest.dir}rxtxfilter" value="">
				<istrue value="@{rxtx}" />
			</condition>
			<condition property="@{dest.dir}rxtxfilter" value="DOES_NOT_EXIST">
				<isfalse value="@{rxtx}" />
			</condition>
			<delete dir="@{dest.dir}" />
			<copy todir="@{dest.dir}" verbose="no">
				<fileset refid="@{srcid}" />
			</copy>
			<!-- required lib: Jakarta ORO for optional task <replaceregexp> -->
			<replaceregexp file="@{dest.dir}/${src.dir}/bt747/Version.java"
			               encoding="${encoding}"
			               match="BUILD = [0-9]+L;"
			               replace="BUILD = ${TIMESTAMP}L;"
			/>
			<replaceregexp file="@{dest.dir}/${src.dir}/bt747/Version.java"
			               encoding="${encoding}"
			               match='BUILD_STR = \".*\";'
			               replace='BUILD_STR = "${full.build.version}.${TIMESTAMP}";'
			/>
			<replaceregexp file="@{dest.dir}/${src.dir}/bt747/Version.java"
			               encoding="${encoding}"
			               match="DATE = [^\s]*;"
			               replace='DATE = "${DATE_DE}";'
			/>
			<replaceregexp file="@{dest.dir}/${src.dir}/bt747/Version.java"
			               encoding="${encoding}"
			               match="VERSION_NUMBER = [^\s]*;"
			               replace='VERSION_NUMBER = "${build_version}";'
			/>


			<replace dir="@{dest.dir}"
			         token="GPSWabaPort"
			         summary="yes"
			         value="GPSRxTxPort"
			>
				<include name="${@{dest.dir}rxtxfilter}${src_waba.dir}/bt747/waba_view/AppBT747.java"
				/>
			</replace>
			<!-- <echo message="FILTER:${@{dest.dir}rxtxfilter}  @{dest.dir} @{rxtx}" /> -->
			<echo message="${@{dest.dir}rxtxfilter}${src_waba.dir}/bt747/waba_view/AppController.java" />
			<replace dir="@{dest.dir}"
			         token="// #if RXTX"
			         summary="yes"
			         value=""
				
			>
				<include name="${@{dest.dir}rxtxfilter}${src_waba.dir}/bt747/waba_view/AppController.java"
				/>
			</replace>
			<condition property="lang" value="${default.lang}">
				<not>
					<isset property="lang" />
				</not>
			</condition>

			<copy file="dev/package.bat" tofile="package.bat" />
			<copy file="dev/upload.bat" tofile="upload.bat" />
			<replaceregexp file="package.bat"
			               match="SET DT=[^\s]*"
			               replace='SET DT=${build_version}'
			/>
		</sequential>
	</macrodef>

	<target name="initdate">
		<setupdates />
	</target>
	<macrodef name="setupdates">
		<sequential>
			<tstamp>
				<format property="DATE" pattern="yyyyMMdd" />
				<format property="DATE_DE" pattern="dd.MM.yyyy" />
				<format property="DATE_UND" pattern="dd_MM_yyyy" />
				<format property="DATE_TIME" pattern="yyyyMMdd_HHmmss" />
				<format property="DATETIME_DE" pattern="dd.MM.yyyy HH:mm:ss" />
				<format property="TIMESTAMP" pattern="yyyyMMddHHmmssSSS" />
			</tstamp>

			<echo level="info">
	            Project: ${ant.project.name} (${basedir})
	            Build file: ${ant.file}
	            Java: ${java.version} ${java.vendor}
	            OS: ${os.name} ${os.version} ${os.arch}
	            ${ant.version} (Java: ${ant.java.version})
	            SVN: ${full.build.version}
	            Time: ${DATETIME_DE}
	        </echo>
		</sequential>
	</macrodef>

	<!-- ======================================== -->
	<!-- getsuffix - set the suffix for files, ... -->
	<!-- ======================================== -->

	<property name="default.suffix" value="_rxtx" />

	<macrodef name="getsuffix">
		<sequential>
			<condition property="suffix" value="${default.suffix}">
				<or>
					<not>
						<isset property="name.suffix" />
					</not>
					<equals arg1="${name.suffix}" arg2="" />
				</or>
			</condition>
			<condition property="suffix" value="${name.suffix}">
				<not>
					<isset property="suffix" />
				</not>
			</condition>
		</sequential>
	</macrodef>
	<!-- ======================================== -->
	<!-- retroweaver - to use retroweaver         -->
	<!-- ======================================== -->
	<!--
    <taskdef name="retroweaver" classname="net.sourceforge.retroweaver.ant.RetroWeaverTask">
        <classpath>
            <fileset dir="${retroweaver.home}/lib" includes="**/*" />
            <pathelement location="${retroweaver.home}/release/retroweaver-all-2.0.5.jar" />
        </classpath>
    </taskdef>
    -->


	<!-- ======================================== -->
	<!-- sign - to sign jars                      -->
	<!-- ======================================== -->

	<target name="sign" if="keytool.sign">
		<!-- Sign only if keytool.sign is set, this indicates parameters are set -->
		<signjar jar="${jar.tosign}"
		         alias="${keytool.alias}"
		         storepass="${keytool.passwd}"
		         keystore="${keytool.keystore}"
		/>
	</target>



</project>

